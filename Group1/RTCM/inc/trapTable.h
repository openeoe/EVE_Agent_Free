/*
 * Note: this file originally auto-generated by mib2c using
 *	  : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id: trapTable.h,v 1.2 2004/01/01 12:07:12 vijaysp Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef TRAPTABLE_H
#define TRAPTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

#define RTM_DEFAULT_INTERVAL 1

#ifdef WIN32
#define RTM_CONFIG_FILE    "SA.conf"
#define RTM_MA_FILE        "NAS_MA.conf"
#define RTM_CONTAINER_FILE "trapTable.conf"
#define RTM_DEFAULT_LOGFILE_PATH "RTM_Logfile"
#else
#define RTM_CONFIG_FILE    "/usr/local/conf/SA.conf"
#define RTM_MA_FILE        "/usr/local/conf/NAS_MA.conf"
#define RTM_CONTAINER_FILE "/usr/local/conf/trapTable.conf"
#define RTM_DEFAULT_LOGFILE_PATH "/usr/local/conf/RTM_Logfile"
#endif

#define RTM_DEFAULT_MAX_LOGFILE_SIZE 1048576 /* 1 MB */

#define TRAPINDEX_MIN  0L
#define TRAPINDEX_MAX  65535L

#define TRAPTYPE_MIN  1L
#define TRAPTYPE_MAX  3L

#define TRAPEXPR_MIN  0L
#define TRAPEXPR_MAX  5L

#define TRAPTRANSPORT_MIN  0L
#define TRAPTRANSPORT_MAX  1L

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

	/** Index trapIndex is internal */

typedef struct trapTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
	/** UNSIGNED32 = ASN_UNSIGNED */
	    unsigned long trapIndex;

	/** UNSIGNED32 = ASN_UNSIGNED */
	    unsigned long trapPolicyID;

	/** INTEGER = ASN_INTEGER */
	    long trapType;

	/** OBJECTID = ASN_OBJECT_ID */
	    oid trapVariable[MAX_OID_LEN];
	    long trapVariable_len;

	/** INTEGER = ASN_INTEGER */
	    long trapExpression;

	/** INTEGER = ASN_INTEGER */
	    long trapValue;

	/** DisplayString = ASN_OCTET_STR */
	    unsigned char trapDescription[255];
	    long trapDescription_len;

	/** IPADDR = ASN_IPADDRESS */
	    unsigned long trapDestinationIP;

	/** INTEGER = ASN_INTEGER */
	    long trapPort;

	/** INTEGER = ASN_INTEGER */
	    long trapTransport;

	/** DisplayString = ASN_OCTET_STR */
	    unsigned char trapMessage[255];
	    long trapMessage_len;

	/** RowStatus = ASN_INTEGER */
	    long trapStatus;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

    /* the value of index.oids will be stored in idx
       when this structure is written into the file */
    /* <Start: WIP_NURI_HPX: Introduce new flag for secondary storage */

    unsigned long idx;

    /* <End: WIP_NURI_HPX */

} trapTable_context;

/*************************************************************
 * function declarations
 */
void init_trapTable(void);
void initialize_table_trapTable(void);
const trapTable_context * trapTable_get_by_idx(netsnmp_index *);
const trapTable_context * trapTable_get_by_idx_rs(netsnmp_index *,
					int row_status);
int trapTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid trapTable_oid[];
extern size_t trapTable_oid_len;

#define trapTable_TABLE_OID 1,3,6,1,4,1,3204,1,3,35,4

/*************************************************************
 * column number definitions for table trapTable
 */
#define COLUMN_TRAPINDEX 1
#define COLUMN_TRAPPOLICYID 2
#define COLUMN_TRAPTYPE 3
#define COLUMN_TRAPVARIABLE 4
#define COLUMN_TRAPEXPRESSION 5
#define COLUMN_TRAPVALUE 6
#define COLUMN_TRAPDESCRIPTION 7
#define COLUMN_TRAPDESTINATIONIP 8
#define COLUMN_TRAPPORT 9
#define COLUMN_TRAPTRANSPORT 10
#define COLUMN_TRAPMESSAGE 11
#define COLUMN_TRAPSTATUS 12
#define trapTable_COL_MIN 1
#define trapTable_COL_MAX 12

/* comment out the following line if you don't handle SET-REQUEST for trapTable */
#define trapTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define trapTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
/* #define trapTable_IDX2 */  /* Commented out by Vijay DUMMY */

/* uncommend the following line if you allow modifications to an
 * active row */
#define trapTable_CAN_MODIFY_ACTIVE_ROW /* uncommented by Vijay DUMMY */

#ifdef trapTable_SET_HANDLING

int trapTable_extract_index( trapTable_context * ctx, netsnmp_index * hdr );

void trapTable_set_reserve1( netsnmp_request_group * );
void trapTable_set_reserve2( netsnmp_request_group * );
void trapTable_set_action( netsnmp_request_group * );
void trapTable_set_commit( netsnmp_request_group * );
void trapTable_set_free( netsnmp_request_group * );
void trapTable_set_undo( netsnmp_request_group * );

trapTable_context * trapTable_duplicate_row( trapTable_context* );
netsnmp_index * trapTable_delete_row( trapTable_context* );

int trapTable_can_activate(trapTable_context *undo_ctx,
		      trapTable_context *row_ctx,
		      netsnmp_request_group * rg);
int trapTable_can_deactivate(trapTable_context *undo_ctx,
			trapTable_context *row_ctx,
			netsnmp_request_group * rg);
int trapTable_can_delete(trapTable_context *undo_ctx,
		    trapTable_context *row_ctx,
		    netsnmp_request_group * rg);


#ifdef trapTable_ROW_CREATION
trapTable_context * trapTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef trapTable_IDX2
trapTable_context * trapTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** TRAPTABLE_H */
