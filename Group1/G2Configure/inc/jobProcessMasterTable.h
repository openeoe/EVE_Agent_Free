/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id: jobProcessMasterTable.h,v 1.1 2003/12/01 14:16:23 guga Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef JOBPROCESSMASTERTABLE_H
#define JOBPROCESSMASTERTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

/** #define values**/
#define JM_MAX_OID_LEN 128
#define JM_MAX_VAR_LEN 255
#define JM_MAX_DT_LEN 20
#define JM_NO_OF_FIELDS 14
#define JM_CONTAINER_FILE "jobProcessMasterTable.conf"
#define JM_ROW_CREATE 4	
#define JM_ROW_DELETE 6
#define TRAP 10
        /** Index jobProcessMasterIndex is internal */

typedef struct jobProcessMasterTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long jobProcessMasterIndex;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char jobProcessMasterID[255];
            long jobProcessMasterID_len;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char jobProcessMasterName[255];
            long jobProcessMasterName_len;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char jobProcessMasterDescription[255];
            long jobProcessMasterDescription_len;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char jobProcessMasterCreatedDate[20];
            long jobProcessMasterCreatedDate_len;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char jobProcessMasterCreatedUserID[255];
            long jobProcessMasterCreatedUserID_len;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char jobProcessMasterCreatedUserName[255];
            long jobProcessMasterCreatedUserName_len;

        /** INTEGER = ASN_INTEGER */
            long jobProcessMasterPeriodicInterval;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char jobProcessMasterStartTime[20];
            long jobProcessMasterStartTime_len;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char jobProcessMasterFinishTime[20];
            long jobProcessMasterFinishTime_len;

        /** INTEGER = ASN_INTEGER */
            long jobProcessMasterCPUPercentUsage;

        /** INTEGER = ASN_INTEGER */
            long jobProcessMasterMemoryPercentUsage;

        /** RowStatus = ASN_INTEGER */
            long jobProcessMasterStatus;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char jobProcessMasterLastUpdatedDateAndTime[20];
            long jobProcessMasterLastUpdatedDateAndTime_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */
  unsigned long idx;

} jobProcessMasterTable_context;
#ifndef VARBIND
#define VARBIND

typedef struct VarBind{
    char  acVariable[MAX_OID_LEN];
    char cType;
    char pcValue [255];
}stVarBindArgs;

#endif /*VARBIND*/

/*************************************************************
 * function declarations
 */
void init_jobProcessMasterTable(void);
void initialize_table_jobProcessMasterTable(void);
const jobProcessMasterTable_context * jobProcessMasterTable_get_by_idx(netsnmp_index *);
const jobProcessMasterTable_context * jobProcessMasterTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int jobProcessMasterTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);

int jobProcessMasterTable_send_snmptrap(int length,stVarBindArgs *trapPDU,int port);
static int
jobProcessMasterTable_snmp_input(int operation,
       netsnmp_session * session,
       int reqid, netsnmp_pdu *pdu, void *magic);

void jobProcessMasterTable_Load_Container_From_File();

/*************************************************************
 * oid declarations
 */
extern oid jobProcessMasterTable_oid[];
extern size_t jobProcessMasterTable_oid_len;

#define jobProcessMasterTable_TABLE_OID 1,3,6,1,4,1,3204,1,3,34,1,1
    
/*************************************************************
 * column number definitions for table jobProcessMasterTable
 */
#define COLUMN_JOBPROCESSMASTERINDEX 1
#define COLUMN_JOBPROCESSMASTERID 2
#define COLUMN_JOBPROCESSMASTERNAME 3
#define COLUMN_JOBPROCESSMASTERDESCRIPTION 4
#define COLUMN_JOBPROCESSMASTERCREATEDDATE 5
#define COLUMN_JOBPROCESSMASTERCREATEDUSERID 6
#define COLUMN_JOBPROCESSMASTERCREATEDUSERNAME 7
#define COLUMN_JOBPROCESSMASTERPERIODICINTERVAL 8
#define COLUMN_JOBPROCESSMASTERSTARTTIME 9
#define COLUMN_JOBPROCESSMASTERFINISHTIME 10
#define COLUMN_JOBPROCESSMASTERCPUPERCENTUSAGE 11
#define COLUMN_JOBPROCESSMASTERMEMORYPERCENTUSAGE 12
#define COLUMN_JOBPROCESSMASTERSTATUS 13
#define COLUMN_JOBPROCESSMASTERLASTUPDATEDDATEANDTIME 14
#define jobProcessMasterTable_COL_MIN 2
#define jobProcessMasterTable_COL_MAX 14

/* comment out the following line if you don't handle SET-REQUEST for jobProcessMasterTable */
#define jobProcessMasterTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define jobProcessMasterTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define jobProcessMasterTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define jobProcessMasterTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef jobProcessMasterTable_SET_HANDLING

int jobProcessMasterTable_extract_index( jobProcessMasterTable_context * ctx, netsnmp_index * hdr );

void jobProcessMasterTable_set_reserve1( netsnmp_request_group * );
void jobProcessMasterTable_set_reserve2( netsnmp_request_group * );
void jobProcessMasterTable_set_action( netsnmp_request_group * );
void jobProcessMasterTable_set_commit( netsnmp_request_group * );
void jobProcessMasterTable_set_free( netsnmp_request_group * );
void jobProcessMasterTable_set_undo( netsnmp_request_group * );

jobProcessMasterTable_context * jobProcessMasterTable_duplicate_row( jobProcessMasterTable_context* );
netsnmp_index * jobProcessMasterTable_delete_row( jobProcessMasterTable_context* );

int jobProcessMasterTable_can_activate(jobProcessMasterTable_context *undo_ctx,
                      jobProcessMasterTable_context *row_ctx,
                      netsnmp_request_group * rg);
int jobProcessMasterTable_can_deactivate(jobProcessMasterTable_context *undo_ctx,
                        jobProcessMasterTable_context *row_ctx,
                        netsnmp_request_group * rg);
int jobProcessMasterTable_can_delete(jobProcessMasterTable_context *undo_ctx,
                    jobProcessMasterTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef jobProcessMasterTable_ROW_CREATION
jobProcessMasterTable_context * jobProcessMasterTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef jobProcessMasterTable_IDX2
jobProcessMasterTable_context * jobProcessMasterTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** JOBPROCESSMASTERTABLE_H */
