/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id: allowTelnetTable.h,v 1.1 2003/12/01 14:27:15 guga Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef ALLOWTELNETTABLE_H
#define ALLOWTELNETTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

/** #define values**/
#ifndef MAX_VALUES
#define MAX_VALUES
	
#define MAX_OID_LEN 128
#define MAX_VAR_LEN 255
#define NO_OF_FIELDS 5
#define USER_SUCCESS 1
#define USER_FAILURE 2
#define USER_TRAP 10
#define USER_ROW_CREATE 4
#define USER_ROW_DELETE 6

#endif
	
#define  TELNET_CONTAINER_FILE "allowTelnetTable.conf"

        /** Index allowTelenetIndex is internal */

typedef struct allowTelnetTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long allowTelenetIndex;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char allowTelenetID[255];
            long allowTelenetID_len;

        /** IPADDR = ASN_IPADDRESS */
            unsigned long allowTelenetIPAddress;

        /** INTEGER = ASN_INTEGER */
            long allowTelenetPortNo;

        /** RowStatus = ASN_INTEGER */
            long allowTelnetStatus;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

 unsigned long idx;

} allowTelnetTable_context;

#ifndef VARBIND
#define VARBIND

typedef struct VarBind{
    char  acVariable[MAX_OID_LEN];
    char cType;
    char pcValue [255];
}stVarBindArgs;
#endif /* VARBIND */


/*************************************************************
 * function declarations
 */
void init_allowTelnetTable(void);
void initialize_table_allowTelnetTable(void);
const allowTelnetTable_context * allowTelnetTable_get_by_idx(netsnmp_index *);
const allowTelnetTable_context * allowTelnetTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int allowTelnetTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);
int allowTelnetTable_send_snmptrap(int length,stVarBindArgs *trapPDU,int port);
static int
allowTelnetTable_snmp_input(int operation,
       netsnmp_session * session,
       int reqid, netsnmp_pdu *pdu, void *magic);

void allowTelnetTable_Load_Container_From_File();


/*************************************************************
 * oid declarations
 */
extern oid allowTelnetTable_oid[];
extern size_t allowTelnetTable_oid_len;

#define allowTelnetTable_TABLE_OID 1,3,6,1,4,1,3204,1,3,34,4,3
    
/*************************************************************
 * column number definitions for table allowTelnetTable
 */
#define COLUMN_ALLOWTELENETINDEX 1
#define COLUMN_ALLOWTELENETID 2
#define COLUMN_ALLOWTELENETIPADDRESS 3
#define COLUMN_ALLOWTELENETPORTNO 4
#define COLUMN_ALLOWTELNETSTATUS 5
#define allowTelnetTable_COL_MIN 2
#define allowTelnetTable_COL_MAX 5

/* comment out the following line if you don't handle SET-REQUEST for allowTelnetTable */
#define allowTelnetTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define allowTelnetTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define allowTelnetTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define allowTelnetTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef allowTelnetTable_SET_HANDLING

int allowTelnetTable_extract_index( allowTelnetTable_context * ctx, netsnmp_index * hdr );

void allowTelnetTable_set_reserve1( netsnmp_request_group * );
void allowTelnetTable_set_reserve2( netsnmp_request_group * );
void allowTelnetTable_set_action( netsnmp_request_group * );
void allowTelnetTable_set_commit( netsnmp_request_group * );
void allowTelnetTable_set_free( netsnmp_request_group * );
void allowTelnetTable_set_undo( netsnmp_request_group * );

allowTelnetTable_context * allowTelnetTable_duplicate_row( allowTelnetTable_context* );
netsnmp_index * allowTelnetTable_delete_row( allowTelnetTable_context* );

int allowTelnetTable_can_activate(allowTelnetTable_context *undo_ctx,
                      allowTelnetTable_context *row_ctx,
                      netsnmp_request_group * rg);
int allowTelnetTable_can_deactivate(allowTelnetTable_context *undo_ctx,
                        allowTelnetTable_context *row_ctx,
                        netsnmp_request_group * rg);
int allowTelnetTable_can_delete(allowTelnetTable_context *undo_ctx,
                    allowTelnetTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef allowTelnetTable_ROW_CREATION
allowTelnetTable_context * allowTelnetTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef allowTelnetTable_IDX2
allowTelnetTable_context * allowTelnetTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** ALLOWTELNETTABLE_H */
