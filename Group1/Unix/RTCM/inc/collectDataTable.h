/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id: collectDataTable.h,v 1.12 2003/11/11 07:15:42 vijaysp Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef COLLECTDATATABLE_H
#define COLLECTDATATABLE_H


#ifdef WIN32
#define RTC_CONTAINER_FILE "collectDataTable.conf"
#define RTC_DEFAULT_LOGFILE  "RTC_Logfile"
#else
#define RTC_CONTAINER_FILE   "/usr/local/conf/collectDataTable.conf"
#define RTC_DEFAULT_LOGFILE  "/usr/local/conf/RTC_Logfile"
#endif /* WIN32 */

#define RTC_MAX_LIST_NODES 5000
#define INIT_INTERVAL  3600
#define RTC_DEFAULT_INTERVAL 10
#define RTC_IDLE_TIME  60
#define CONVERT_TO_SEC(x) (x)/100

#define COLLECTDATATYPE_MIN 1L
#define COLLECTDATATYPE_MAX 3L

/* Forward declaration of RTC_List */
struct RTC_List;

typedef struct RTC_List {
    long interval;
    unsigned long index;
    struct RTC_List *next;
} RTC_List;

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index collectDataIndex is internal */

typedef struct collectDataTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long collectDataIndex;

        /** INTEGER = ASN_INTEGER */
            long collectDataType;

        /** OBJECTID = ASN_OBJECT_ID */
            oid collectDataVariable[MAX_OID_LEN];
            long collectDataVariable_len;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char collectDataStartDate[MAX_OID_LEN];
            long collectDataStartDate_len;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char collectDataEndDate[MAX_OID_LEN];
            long collectDataEndDate_len;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataMonStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataMonEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataMonFrequent;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataTueStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataTueEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataTueFrequent;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataWedStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataWedEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataWedFrequent;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataThuStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataThuEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataThuFrequent;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataFriStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataFriEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataFriFrequent;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataSatStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataSatEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataSatFrequent;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataSunStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long collectDataSunEndTime;

        /** INTEGER = ASN_INTEGER */
            long collectDataSunFrequent;

        /** RowStatus = ASN_INTEGER */
            long collectDataStatus;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

    /* the value of index.oids will be stored in idx
       when this structure is written into the file */
    /* <Start: WIP_NURI_HPX: Introduce new flag for secondary storage */

    unsigned long idx;

    /* <End: WIP_NURI_HPX */

} collectDataTable_context;

/*************************************************************
 * function declarations
 */
void init_collectDataTable(void);
void initialize_table_collectDataTable(void);
const collectDataTable_context * collectDataTable_get_by_idx(netsnmp_index *);
const collectDataTable_context * collectDataTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int collectDataTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid collectDataTable_oid[];
extern size_t collectDataTable_oid_len;

#define collectDataTable_TABLE_OID 1,3,6,1,4,1,3204,1,3,35,5
    
/*************************************************************
 * column number definitions for table collectDataTable
 */
#define COLUMN_COLLECTDATAINDEX 1
#define COLUMN_COLLECTDATATYPE 2
#define COLUMN_COLLECTDATAVARIABLE 3
#define COLUMN_COLLECTDATASTARTDATE 4
#define COLUMN_COLLECTDATAENDDATE 5
#define COLUMN_COLLECTDATAMONSTARTTIME 6
#define COLUMN_COLLECTDATAMONENDTIME 7
#define COLUMN_COLLECTDATAMONFREQUENT 8
#define COLUMN_COLLECTDATATUESTARTTIME 9
#define COLUMN_COLLECTDATATUEENDTIME 10
#define COLUMN_COLLECTDATATUEFREQUENT 11
#define COLUMN_COLLECTDATAWEDSTARTTIME 12
#define COLUMN_COLLECTDATAWEDENDTIME 13
#define COLUMN_COLLECTDATAWEDFREQUENT 14
#define COLUMN_COLLECTDATATHUSTARTTIME 15
#define COLUMN_COLLECTDATATHUENDTIME 16
#define COLUMN_COLLECTDATATHUFREQUENT 17
#define COLUMN_COLLECTDATAFRISTARTTIME 18
#define COLUMN_COLLECTDATAFRIENDTIME 19
#define COLUMN_COLLECTDATAFRIFREQUENT 20
#define COLUMN_COLLECTDATASATSTARTTIME 21
#define COLUMN_COLLECTDATASATENDTIME 22
#define COLUMN_COLLECTDATASATFREQUENT 23
#define COLUMN_COLLECTDATASUNSTARTTIME 24
#define COLUMN_COLLECTDATASUNENDTIME 25
#define COLUMN_COLLECTDATASUNFREQUENT 26
#define COLUMN_COLLECTDATASTATUS 27
#define collectDataTable_COL_MIN 1
#define collectDataTable_COL_MAX 27

/* comment out the following line if you don't handle SET-REQUEST for collectDataTable */
#define collectDataTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define collectDataTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
/* #define collectDataTable_IDX2 */

/* uncommend the following line if you allow modifications to an
 * active row */
#define collectDataTable_CAN_MODIFY_ACTIVE_ROW

#ifdef collectDataTable_SET_HANDLING

int collectDataTable_extract_index( collectDataTable_context * ctx, netsnmp_index * hdr );

void collectDataTable_set_reserve1( netsnmp_request_group * );
void collectDataTable_set_reserve2( netsnmp_request_group * );
void collectDataTable_set_action( netsnmp_request_group * );
void collectDataTable_set_commit( netsnmp_request_group * );
void collectDataTable_set_free( netsnmp_request_group * );
void collectDataTable_set_undo( netsnmp_request_group * );

collectDataTable_context * collectDataTable_duplicate_row( collectDataTable_context* );
netsnmp_index * collectDataTable_delete_row( collectDataTable_context* );

int collectDataTable_can_activate(collectDataTable_context *undo_ctx,
                      collectDataTable_context *row_ctx,
                      netsnmp_request_group * rg);
int collectDataTable_can_deactivate(collectDataTable_context *undo_ctx,
                        collectDataTable_context *row_ctx,
                        netsnmp_request_group * rg);
int collectDataTable_can_delete(collectDataTable_context *undo_ctx,
                    collectDataTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef collectDataTable_ROW_CREATION
collectDataTable_context * collectDataTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef collectDataTable_IDX2
collectDataTable_context * collectDataTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** COLLECTDATATABLE_H */
