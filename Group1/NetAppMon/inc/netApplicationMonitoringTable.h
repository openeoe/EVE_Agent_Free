/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id: netApplicationMonitoringTable.h,v 1.14 2004/01/05 04:26:13 saisk Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef NETAPPLICATIONMONITORINGTABLE_H
#define NETAPPLICATIONMONITORINGTABLE_H

/* START: WIP_NURI_ALL */
#include "NASCenter_Errors.h"

#ifndef TRUE
#define TRUE    1
#endif
#ifndef FALSE
#define FALSE   0
#endif

#ifndef BOOL
#define BOOL    int
#endif

#ifdef WIN32
#define NAM_CONTAINER_FILE "netApplicationMonTable.conf"
#define NAM_DEFAULT_LOGFILE  "NAM_Logfile"
#else
#define NAM_CONTAINER_FILE "/usr/local/conf/netApplicationMonTable.conf"
#define NAM_DEFAULT_LOGFILE  "/usr/local/conf/NAM_Logfile"
#endif


#define NAM_MAX_LIST_NODES 5000
#define INIT_INTERVAL  3600
#define NAM_DEFAULT_INTERVAL 10
#define NAM_IDLE_TIME  60
#define CONVERT_TO_SEC(x) (x)/100

/********************************** macros *********************************/
#define MAX_REPETITIONS  6
#define IP_STR_SIZE      16 /*xxx.xxx.xxx.xxx*/
#define MAX_PROC_NAME    255 
#define NAM_DELIMITER    "  "
#define NAM_DEFAULT_LOG_FILE "NAMDefaultLog.log"
/******************************* exported types ****************************/

typedef struct
{
    unsigned long ulCPU ;
    unsigned long ulMem ;
    unsigned long ulInOctets;   
    unsigned long ulInUcastPkts;
    unsigned long ulOutOctets;   
    unsigned long ulOutUcastPkts;
}stSetDetails;

/* Forward declaration of NAM_List */

struct NAM_List;

typedef struct NAM_List {
    long interval;
    unsigned long my_index;
    struct NAM_List *next;
} NAM_List;



/* END: WIP_NURI_ALL */

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index netApplicationMonitoringIndex is internal */

typedef struct netApplicationMonitoringTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long netApplicationMonitoringIndex;

        /** OCTETSTR = ASN_OCTET_STR */
            unsigned char netApplicationMonitoringCreator[255];
            long netApplicationMonitoringCreator_len;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char netApplicationMonitoringDescription[255];
            long netApplicationMonitoringDescription_len;

        /** IPADDR = ASN_IPADDRESS */
            unsigned long netApplicationMonitoringServerAddress;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char netApplicationMonitoringProcessName[255];
            long netApplicationMonitoringProcessName_len;

        /** INTEGER = ASN_INTEGER */
            long netApplicationMonitoringPort;

        /** INTEGER = ASN_INTEGER */
            long netApplicationMonitoringSampleInterval;

        /** INTEGER = ASN_INTEGER */
            long netApplicationMonitoringInterfaceNumber;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char netApplicationMonitoringStartDate[MAX_OID_LEN];
            long netApplicationMonitoringStartDate_len;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char netApplicationMonitoringEndDate[MAX_OID_LEN];
            long netApplicationMonitoringEndDate_len;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringMonStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringMonEndTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringTueStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringTueEndTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringWebStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringWebEndTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringThuStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringThuEndTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringFriStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringFriEndTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringSatStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringSatEndTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringSunStartTime;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringSunEndTime;

        /** DateAndTime = ASN_OCTET_STR */
            unsigned char netApplicationMonitoringCreateDateTime[MAX_OID_LEN];
            long netApplicationMonitoringCreateDateTime_len;

        /** RowStatus = ASN_INTEGER */
            long netApplicationMonitoringStatus;

        /** TICKS = ASN_TIMETICKS */
            unsigned long netApplicationMonitoringRTT;

        /** INTEGER = ASN_INTEGER */
            long netApplicationMonitoringAvgCPUPercentage;

        /** INTEGER = ASN_INTEGER */
            long netApplicationMonitoringAvgMemoryPercentage;

        /** COUNTER64 = ASN_COUNTER64 */
    /** TODO: Is this type correct? */

    /* START: WIP_NURI_ALL */

            unsigned long netApplicationMonitoringInOctets;

        /** COUNTER64 = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            unsigned long netApplicationMonitoringInPkts;

            /** COUNTER64 = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            unsigned long netApplicationMonitoringOutOctets;

        /** COUNTER64 = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            unsigned long netApplicationMonitoringOutPkts;


            /* START: WIP_NURI_ALL */
    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */
    /* <Start: WIP_NURI_ALL: Introduce new flag for secondary storage */

    unsigned long idx;

    /* <End: WIP_NURI_ALL */

} netApplicationMonitoringTable_context;

/*************************************************************
 * function declarations
 */
void init_netApplicationMonitoringTable(void);
void initialize_table_netApplicationMonitoringTable(void);
const netApplicationMonitoringTable_context * netApplicationMonitoringTable_get_by_idx(netsnmp_index *);
const netApplicationMonitoringTable_context * netApplicationMonitoringTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int netApplicationMonitoringTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid netApplicationMonitoringTable_oid[];
extern size_t netApplicationMonitoringTable_oid_len;

#define netApplicationMonitoringTable_TABLE_OID 1,3,6,1,4,1,3204,1,3,30,1
    
/*************************************************************
 * column number definitions for table netApplicationMonitoringTable
 */
#define COLUMN_NETAPPLICATIONMONITORINGINDEX 1
#define COLUMN_NETAPPLICATIONMONITORINGCREATOR 2
#define COLUMN_NETAPPLICATIONMONITORINGDESCRIPTION 3
#define COLUMN_NETAPPLICATIONMONITORINGSERVERADDRESS 4
#define COLUMN_NETAPPLICATIONMONITORINGPROCESSNAME 5
#define COLUMN_NETAPPLICATIONMONITORINGPORT 6
#define COLUMN_NETAPPLICATIONMONITORINGSAMPLEINTERVAL 7
#define COLUMN_NETAPPLICATIONMONITORINGINTERFACENUMBER 8
#define COLUMN_NETAPPLICATIONMONITORINGSTARTDATE 9
#define COLUMN_NETAPPLICATIONMONITORINGENDDATE 10
#define COLUMN_NETAPPLICATIONMONITORINGMONSTARTTIME 11
#define COLUMN_NETAPPLICATIONMONITORINGMONENDTIME 12
#define COLUMN_NETAPPLICATIONMONITORINGTUESTARTTIME 13
#define COLUMN_NETAPPLICATIONMONITORINGTUEENDTIME 14
#define COLUMN_NETAPPLICATIONMONITORINGWEBSTARTTIME 15
#define COLUMN_NETAPPLICATIONMONITORINGWEBENDTIME 16
#define COLUMN_NETAPPLICATIONMONITORINGTHUSTARTTIME 17
#define COLUMN_NETAPPLICATIONMONITORINGTHUENDTIME 18
#define COLUMN_NETAPPLICATIONMONITORINGFRISTARTTIME 19
#define COLUMN_NETAPPLICATIONMONITORINGFRIENDTIME 20
#define COLUMN_NETAPPLICATIONMONITORINGSATSTARTTIME 21
#define COLUMN_NETAPPLICATIONMONITORINGSATENDTIME 22
#define COLUMN_NETAPPLICATIONMONITORINGSUNSTARTTIME 23
#define COLUMN_NETAPPLICATIONMONITORINGSUNENDTIME 24
#define COLUMN_NETAPPLICATIONMONITORINGCREATEDATETIME 25
#define COLUMN_NETAPPLICATIONMONITORINGSTATUS 26
#define COLUMN_NETAPPLICATIONMONITORINGRTT 27
#define COLUMN_NETAPPLICATIONMONITORINGAVGCPUPERCENTAGE 28
#define COLUMN_NETAPPLICATIONMONITORINGAVGMEMORYPERCENTAGE 29
#define COLUMN_NETAPPLICATIONMONITORINGINOCTETS 30
#define COLUMN_NETAPPLICATIONMONITORINGINPKTS 31
#define COLUMN_NETAPPLICATIONMONITORINGOUTOCTETS 32
#define COLUMN_NETAPPLICATIONMONITORINGOUTPKTS 33
#define netApplicationMonitoringTable_COL_MIN 2
#define netApplicationMonitoringTable_COL_MAX 33

/* comment out the following line if you don't handle SET-REQUEST for netApplicationMonitoringTable */
#define netApplicationMonitoringTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define netApplicationMonitoringTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */

/* START: WIP_NURI_ALL */
/* #define netApplicationMonitoringTable_IDX2 */
/* END: WIP_NURI_ALL */

/* uncommend the following line if you allow modifications to an
 * active row */
/** define netApplicationMonitoringTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef netApplicationMonitoringTable_SET_HANDLING

int netApplicationMonitoringTable_extract_index( netApplicationMonitoringTable_context * ctx, netsnmp_index * hdr );

void netApplicationMonitoringTable_set_reserve1( netsnmp_request_group * );
void netApplicationMonitoringTable_set_reserve2( netsnmp_request_group * );
void netApplicationMonitoringTable_set_action( netsnmp_request_group * );
void netApplicationMonitoringTable_set_commit( netsnmp_request_group * );
void netApplicationMonitoringTable_set_free( netsnmp_request_group * );
void netApplicationMonitoringTable_set_undo( netsnmp_request_group * );

netApplicationMonitoringTable_context * netApplicationMonitoringTable_duplicate_row( netApplicationMonitoringTable_context* );
netsnmp_index * netApplicationMonitoringTable_delete_row( netApplicationMonitoringTable_context* );

int netApplicationMonitoringTable_can_activate(netApplicationMonitoringTable_context *undo_ctx,
                      netApplicationMonitoringTable_context *row_ctx,
                      netsnmp_request_group * rg);
int netApplicationMonitoringTable_can_deactivate(netApplicationMonitoringTable_context *undo_ctx,
                        netApplicationMonitoringTable_context *row_ctx,
                        netsnmp_request_group * rg);
int netApplicationMonitoringTable_can_delete(netApplicationMonitoringTable_context *undo_ctx,
                    netApplicationMonitoringTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef netApplicationMonitoringTable_ROW_CREATION
netApplicationMonitoringTable_context * netApplicationMonitoringTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef netApplicationMonitoringTable_IDX2
netApplicationMonitoringTable_context * netApplicationMonitoringTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

/* START: WIP_NURI_ALL */

/************************* exported function prototypes ********************/

/*****************************************************************************
 *
 * name             :   InitNAM
 * description      :   Initialize NAM
 * input parameters :   void
 * output parameters:   void
 * return type      :   void
 * global variables :   
 * calls            :  
 */

void InitNAM(void);

/*****************************************************************************
 *
 * name             :   InitProcList
 * description      :   Initialize the Process List
 * input parameters :   void
 * output parameters:   void
 * return type      :   void
 * global variables :   
 * calls            :   
 */

void InitProcList(void);

/*****************************************************************************
 *
 * name             :   NAM_Retrieve_And_Set_Data
 * description      :   Retrieves and set data in to MIB
 * input parameters :   unsigned long, long
 * output parameters:   void
 * return type      :   void
 * global variables :   
 * calls            :   
 */

int NAM_Retrieve_And_Set_Data (unsigned long ulIndex, long interval);

/*****************************************************************************
 *
 * name             :   NAM_GetProcessDetails 
 * description      :   Gets Process Name, CPU Percent and MEM Percent from 
 *                      Nuri Enterprise Process Table
 * input parameters :   unsigned long, unsigned short
 * outputparameters :   
 * return type      :   ENASCenterError 
 * global variables :   
 * calls	        :     
 *                      
 *
 */

ENASCenterError NAM_GetProcessDetails(unsigned long ulServerIp, unsigned short uiPort);

/*****************************************************************************
 *
 * name             :   NAM_GetValue
 * description      :   Gets Process and Interface Details
 * input parameters :   char*,unsigned long,unsigned short,unsigned int
 * output parameters:   stSetDetails*
 * return type      :   ENASCenterError
 * global variables :   
 * calls            :   
 */

ENASCenterError NAM_GetValue(char* cpProcName,unsigned long ulServerIp, 
                             unsigned short uiPort, unsigned int uiIFIndex, 
                             stSetDetails *pstSetDet );

/*****************************************************************************
 *
 * name             :   NAM_ClearProcList
 * description      :   Clears memory of Process List
 * input parameters :   void
 * output parameters:   void
 * return type      :   void
 * global variables :   
 * calls            :   
 */

void NAM_ClearProcList(void);

/*****************************************************************************
 *
 * name             :   NAM_WriteToLogFile
 * description      :   Writes to Log file
 * input parameters :   char*, stSetDetails, BOOL
 * output parameters:   void
 * return type      :   void
 * global variables :   
 * calls            :   
 */

void NAM_WriteToLogFile(char* cpProcName, stSetDetails stDetails, BOOL bProcStatus);

/*****************************************************************************
 *
 * name             :   NAM_SendLogFileToManager
 * description      :   Sends Log file to Manager
 * input parameters :   void*
 * output parameters:   
 * return type      :   
 * global variables :   
 * calls            :   
 */

void NAM_SendLogFileToManager (void* pArg);

/* END: WIP_NURI_ALL */

#endif /** NETAPPLICATIONMONITORINGTABLE_H */
