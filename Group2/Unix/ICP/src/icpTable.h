/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id: icpTable.h,v 1.1 2003/12/17 07:49:12 baravind Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef ICPTABLE_H
#define ICPTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

/** #define values**/
#define ICP_MAX_OID_LEN 128
#define ICP_MAX_VAR_LEN 255
#define ICP_NO_OF_FIELDS 4
#define ICP_CONTAINER_FILE "icpTable.conf"
#define ICP_SUCCESS 1
#define ICP_FAILURE 2
#define ICP_TRAP 10
#define ICP_ROW_CREATE 4
#define ICP_ROW_DELETE 6


        /** Index icpIndex is internal */

typedef struct icpTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long icpIndex;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char icpUserId[255];
            long icpUserId_len;

        /** DisplayString = ASN_OCTET_STR */
            unsigned char icpCommand[255];
            long icpCommand_len;

        /** RowStatus = ASN_INTEGER */
            long icpStatus;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */
   unsigned long idx;

} icpTable_context;

#ifndef VARBIND
#define VARBIND
typedef struct VarBind{
    char  acVariable[MAX_OID_LEN];
    char cType;
    char pcValue [255];
}stVarBindArgs;
#endif /*VARBIND*/ 


/*************************************************************
 * function declarations
 */
void init_icpTable(void);
void initialize_table_icpTable(void);
const icpTable_context * icpTable_get_by_idx(netsnmp_index *);
const icpTable_context * icpTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int icpTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);

int icpTable_send_snmptrap(int length,stVarBindArgs *trapPDU,int port);
static int
icpTable_snmp_input(int operation,
       netsnmp_session * session,
       int reqid, netsnmp_pdu *pdu, void *magic);
void icpTable_Load_Container_From_File();

/*************************************************************
 * oid declarations
 */
extern oid icpTable_oid[];
extern size_t icpTable_oid_len;

#define icpTable_TABLE_OID 1,3,6,1,4,1,3204,1,3,34,6
    
/*************************************************************
 * column number definitions for table icpTable
 */
#define COLUMN_ICPINDEX 1
#define COLUMN_ICPUSERID 2
#define COLUMN_ICPCOMMAND 3
#define COLUMN_ICPSTATUS 4
#define icpTable_COL_MIN 2
#define icpTable_COL_MAX 4

/* comment out the following line if you don't handle SET-REQUEST for icpTable */
#define icpTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define icpTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define icpTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define icpTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef icpTable_SET_HANDLING

int icpTable_extract_index( icpTable_context * ctx, netsnmp_index * hdr );

void icpTable_set_reserve1( netsnmp_request_group * );
void icpTable_set_reserve2( netsnmp_request_group * );
void icpTable_set_action( netsnmp_request_group * );
void icpTable_set_commit( netsnmp_request_group * );
void icpTable_set_free( netsnmp_request_group * );
void icpTable_set_undo( netsnmp_request_group * );

icpTable_context * icpTable_duplicate_row( icpTable_context* );
netsnmp_index * icpTable_delete_row( icpTable_context* );

int icpTable_can_activate(icpTable_context *undo_ctx,
                      icpTable_context *row_ctx,
                      netsnmp_request_group * rg);
int icpTable_can_deactivate(icpTable_context *undo_ctx,
                        icpTable_context *row_ctx,
                        netsnmp_request_group * rg);
int icpTable_can_delete(icpTable_context *undo_ctx,
                    icpTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef icpTable_ROW_CREATION
icpTable_context * icpTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef icpTable_IDX2
icpTable_context * icpTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** ICPTABLE_H */
